- name: loading platform variables
  include_vars: "debian.yml"
  when: ansible_os_family == "Debian"
  tags:
    - mysql

- name: loading platform variables
  include_vars: "rhel{{ ansible_distribution_major_version }}.yml"
  when: ansible_os_family == "RedHat"
  tags:
    - mysql

- include: password.yml
  when: mysql.password is defined and mysql.password != ""
  tags:
    - mysql

- name: checking for previous installation
  stat: path=/usr/sbin/mysqld
  register: mysqld_stat

- name: installing dependencies via apt
  apt: name=python-mysqldb state=present
  when: ansible_os_family == "Debian"
  tags:
    - mysql

- name: installing dependencies via yum
  yum: name=MySQL-python state=latest
  when: ansible_os_family == "RedHat"
  tags:
    - mysql

- name: installing MySQL packages via apt
  apt: name={{ item }} state=latest
  with_items: mysql_role.packages
  when: ansible_os_family == "Debian"
  tags:
    - mysql

- name: installing MySQL packages via yum
  yum: name={{ item }} state=latest enablerepo=remi,remi-php56
  with_items: mysql_role.packages
  when: ansible_os_family == "RedHat"
  tags:
    - mysql

- name: restarting MySQL
  command: service {{ mysql_role.service }} restart
  tags:
    - mysql

- name: updating root password for localhost root account
  command: /usr/bin/mysqladmin -u root password '{{ mysql.password }}'
  when: (ansible_os_family == "RedHat") and (mysqld_stat.stat.exists == False)
  ignore_errors: true
  tags:
    - mysql

- name: setup MySQL password file
  template: src=root_my.cnf.j2 dest=/root/.my.cnf
  when: mysql.password is defined and mysql.password != ""
  tags:
    - mysql

- name: backuping configuration
  shell: creates={{ mysql_role.confdir }}/my.cnf.orig cp {{ mysql_role.confdir }}/my.cnf {{ mysql_role.confdir }}/my.cnf.orig
  register: result
  tags:
    - mysql

- fetch: src={{ mysql_role.confdir }}/my.cnf.orig dest=fetched
  when: result|changed
  tags:
    - mysql

- name: deploying configuration
  template: src=my.cnf.j2 dest={{ mysql_role.confdir }}/my.cnf owner=root mode=0644 backup=yes
  register: result
  tags:
    - mysql

- name: restarting MySQL
  command: service {{ mysql_role.service }} restart
  tags:
    - mysql

- fetch: src={{ mysql_role.confdir }}/my.cnf dest=fetched
  when: result|changed
  tags:
    - mysql

- include: security.yml
  tags:
    - mysql

- name: checking service daemon
  command: service {{ mysql_role.service }} restart
  tags:
    - mysql

- name: enabling autoload
  service:
    name={{ mysql_role.service }}
    enabled=yes
  tags:
    - mysql