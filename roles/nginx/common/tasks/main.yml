- name: loading platform variables
  include_vars: "{{ ansible_os_family|lower }}.yml"
  tags:
    - nginx

- name: installing NGINX PPA
  apt_repository: repo=ppa:nginx/stable state=present
  when: ansible_distribution == "Ubuntu"
  tags:
    - nginx

- name: installing NGINX repo
  template:
    src=etc/apt/sources.list.d/nginx.list.j2
    dest=/etc/apt/sources.list.d/nginx.list
  when: ansible_distribution == "Debian"
  tags:
    - nginx

- name: adding NGINX GPG key
  apt_key: url=http://nginx.org/keys/nginx_signing.key state=present
  when: ansible_distribution == "Debian"
  tags:
    - nginx

- name: installing NGINX
  apt: name={{ item }} state=latest update_cache=yes
  with_items: nginx_role.packages
  when: ansible_os_family == "Debian"
  tags:
    - nginx

- name: installing NGINX repository
  yum: name={{ item }} state=present
  with_items:
    - "http://nginx.org/packages/{{ ansible_distribution|lower }}/{{ ansible_distribution_major_version }}/noarch/RPMS/nginx-release-{{ ansible_distribution|lower }}-{{ ansible_distribution_major_version }}-0.el{{ ansible_distribution_major_version }}.ngx.noarch.rpm"
  when: ansible_os_family == "RedHat"
  tags:
    - nginx

- name: installing NGINX packages
  yum: name={{ item }} state=latest
  with_items: nginx_role.packages
  when: ansible_os_family == "RedHat"
  tags:
    - nginx

- name: stopping NGINX
  command: service {{ nginx_role.service }} stop
  tags:
    - nginx

- name: creating nginx group
  group:
    name={{ nginx_role.group }}
    state=present
    system=yes
  tags:
    - nginx

- name: creating nginx user
  user:
    name={{ nginx_role.owner }}
    group={{ nginx_role.group }}
    state=present
    system=yes
  tags:
    - nginx

- name: removing absent configurations
  file: path={{ item }} state=absent
  with_items:
    - "/etc/nginx/conf.d"
    - "/etc/nginx/conf-enabled"
    - "/etc/nginx/sites-enabled"
  tags:
    - nginx

- name: creating directories
  file: path={{ item }} state=directory
  with_items:
    - "/etc/nginx/xtra"
    - "/etc/nginx/html"
    - "/etc/nginx/conf-available"
    - "/etc/nginx/conf-enabled"
    - "/etc/nginx/sites-available"
    - "/etc/nginx/sites-enabled"
  tags:
    - nginx

- name: loading custom pages
  copy:
    src={{ item }}
    dest=/etc/nginx/html/{{ item }}
  with_items:
    - "401.html"
    - "403.html"
    - "404.html"
    - "502.html"
    - "50X.html"
    - "index.html"
  tags:
    - nginx

- name: creating log directories
  file:
    path={{ nginx_role.logdir }}/{{ item.key }}
    mode=0755
    owner={{ nginx_role.owner }}
    group={{ nginx_role.group }}
    state=directory
    recurse=yes
  with_dict: stores
  tags:
    - nginx

- name: deleting deprecated configurations
  file:
    path=/etc/nginx/{{ item }}
    state=absent
  with_items:
    - "fastcgi_params"
    - "fastcgi.conf"
    - "fastcgi_params"
    - "proxy_params"
    - "scgi_params"
    - "uwsgi_params"
    - "snippets"
  tags:
    - nginx

- name: loading configurations
  template: src=etc/nginx/{{ item.src }}.j2 dest=/etc/nginx/{{ item.dest }}
  with_items:
    - { src: "nginx.conf", dest: "nginx.conf" }
    - { src: "conf-available/gzip.conf", dest: "conf-available/gzip.conf" }
    - { src: "conf-available/tweaks.conf", dest: "conf-available/tweaks.conf" }
    - { src: "xtra/error-40X.conf", dest: "xtra/error-40X.conf" }
    - { src: "xtra/error-50X.conf", dest: "xtra/error-50X.conf" }
    - { src: "xtra/ssl.conf", dest: "xtra/ssl.conf" }
  tags:
    - nginx

- name: enabling configurations
  file:
    src=/etc/nginx/{{ item.src }}
    dest=/etc/nginx/{{ item.dest }}
    state=link
  with_items:
    - { src: "conf-available/gzip.conf", dest: "conf-enabled/gzip.conf" }
    - { src: "conf-available/tweaks.conf", dest: "conf-enabled/tweaks.conf" }
  tags:
    - nginx

- name: setting permissions
  file:
    path={{ item }}
    owner={{ service.user }}
    group={{ service.group }}
    state=directory
    recurse=yes
  with_items:
    - "{{ nginx_role.logdir }}"
  tags:
    - nginx

- name: setting up logrotate
  template:
    src=etc/logrotate.d/{{ nginx_role.service }}.logrotate.j2
    dest=/etc/logrotate.d/{{ nginx_role.service }}
    mode=644
    owner=root
    group=root
  tags:
    - nginx

- name: restarting NGINX
  command: service {{ nginx_role.service }} restart
  tags:
    - nginx